{"version":3,"sources":["components/digit-button.js","components/operator-button.js","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","dispatch","digit","className","onClick","type","ACTIONS","ADD_DIGIT","payload","OperatorButton","operator","CHOOSE_OPERATION","PERCENTAGE","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentNumber","include","previousNumber","evaluate","length","slice","parseFloat","toString","prev","curr","isNaN","resulte","App","useReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAEe,SAASA,EAAT,GAAsD,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,UACnD,OAAO,wBAAQA,UAAWA,GAAa,GACnCC,QAAS,kBAAMH,EAAS,CAAEI,KAAMC,EAAQC,UAAWC,QAAS,CAAEN,YAD3D,SAGEA,ICJE,SAASO,EAAT,GAAiD,IAAvBR,EAAsB,EAAtBA,SAAUS,EAAY,EAAZA,SAC/C,OAAO,wBAAQP,UAAU,kBACrBC,QAAS,kBAAMH,EAAS,CAAEI,KAAMC,EAAQK,iBAAkBH,QAAS,CAAEE,eADlE,SAGGA,I,UCDDJ,EAAU,CACrBC,UAAW,YACXI,iBAAkB,mBAClBC,WAAY,aACZC,MAAO,QACPC,aAAc,eACdC,SAAU,YAGZ,SAASC,EAAQC,EAAjB,GAA2C,IAAjBZ,EAAgB,EAAhBA,KAAMG,EAAU,EAAVA,QAC9B,OAAQH,GACN,KAAKC,EAAQC,UACX,OAAIU,EAAMC,UACD,2BACFD,GADL,IAEEE,cAAeX,EAAQN,MACvBgB,WAAW,IAIO,IAAlBV,EAAQN,OAAuC,IAAxBe,EAAME,eAGX,MAAlBX,EAAQN,OAAiBe,EAAME,cAAcC,QAAQ,KAFhDH,EAMF,2BACFA,GADL,IAEEE,cAAc,GAAD,OAAKF,EAAME,eAAiB,IAA5B,OAAiCX,EAAQN,SAG1D,KAAKI,EAAQK,iBACX,OAA2B,MAAvBM,EAAME,eAAiD,MAAxBF,EAAMI,eAChCJ,EAGkB,MAAvBA,EAAME,cACD,2BACFF,GADL,IAEEP,SAAUF,EAAQE,WAIM,MAAxBO,EAAMI,eACD,2BACFJ,GADL,IAEEP,SAAUF,EAAQE,SAClBW,eAAgBJ,EAAME,cACtBA,cAAe,OAIZ,2BACFF,GADL,IAEEP,SAAUF,EAAQE,SAClBW,eAAgBC,EAASL,GACzBE,cAAe,OAGnB,KAAKb,EAAQO,MACX,MAAO,GAET,KAAKP,EAAQQ,aACX,OAAIG,EAAMC,UACD,2BACFD,GADL,IAEEE,cAAe,KACfD,WAAW,IAIY,MAAvBD,EAAME,cACDF,EAG0B,IAA/BA,EAAME,cAAcI,OACtB,2BACKN,GADL,IAEEE,cAAe,OAIZ,2BACFF,GADL,IAEEE,cAAeF,EAAME,cAAcK,MAAM,GAAI,KAGjD,KAAKlB,EAAQS,SACX,OAA2B,MAAvBE,EAAME,eAAiD,MAAxBF,EAAMI,gBAA4C,MAAlBJ,EAAMP,SAChEO,EAGF,2BACFA,GADL,IAEEP,SAAU,KACVW,eAAgB,KAChBH,WAAW,EACXC,cAAeG,EAASL,KAG5B,KAAKX,EAAQM,WACX,OAA2B,MAAvBK,EAAME,cACDF,EAGF,2BACFA,GADL,IAEEC,WAAW,EACXC,eAAgBM,WAAWR,EAAME,eAAiB,KAAKO,aAG3D,QACE,OAAOT,GAIb,SAASK,EAAT,GAA+D,IAA3CH,EAA0C,EAA1CA,cAAeE,EAA2B,EAA3BA,eAAgBX,EAAW,EAAXA,SAC3CiB,EAAOF,WAAWJ,GAClBO,EAAOH,WAAWN,GACxB,GAAIU,MAAMF,IAASE,MAAMD,GACvB,MAAO,GAGT,IAAIE,EAAU,GACd,OAAQpB,GACN,IAAK,IACHoB,EAAUH,EAAOC,EACjB,MACF,IAAK,IACHE,EAAUH,EAAOC,EACjB,MACF,IAAK,IACHE,EAAUH,EAAOC,EACjB,MACF,IAAK,IACHE,EAAmB,IAATF,EAAaD,EAAOC,EAAO,QAKzC,OAAOE,EAAQJ,WA8CFK,MA3Cf,WACE,MAAsCC,qBAAWhB,EAAS,IAA1D,mBAASG,EAAT,KAASA,cAAiBlB,EAA1B,KAEA,OACE,sBAAKE,UAAU,aAAf,UACC,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,iBAAf,SAAiCgB,MAEnC,wBACChB,UAAU,YACVC,QAAS,WAAOH,EAAS,CAAEI,KAAMC,EAAQO,SAF1C,gBAIA,wBACCV,UAAU,YACVC,QAAS,WAAOH,EAAS,CAAEI,KAAMC,EAAQQ,gBAF1C,iBAIA,wBACCX,UAAU,YACVC,QAAU,WAAOH,EAAS,CAAEI,KAAMC,EAAQM,cAF3C,eAIA,cAACH,EAAD,CAAgBR,SAAUA,EAAUS,SAAS,MAC7C,cAACV,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACF,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACF,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACO,EAAD,CAAgBR,SAAUA,EAAUS,SAAS,MAC7C,cAACV,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACF,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACF,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACO,EAAD,CAAgBR,SAAUA,EAAUS,SAAS,MAC7C,cAACV,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACF,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACF,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,cAACO,EAAD,CAAgBR,SAAUA,EAAUS,SAAS,MAC7C,cAACV,EAAD,CAAaC,SAAUA,EAAUC,MAAM,IAAIC,UAAU,aACrD,cAACH,EAAD,CAAaC,SAAUA,EAAUC,MAAM,MACvC,wBACCC,UAAU,kBACVC,QAAS,WAAOH,EAAS,CAAEI,KAAMC,EAAQS,YAF1C,mBC5KUkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aae50940.chunk.js","sourcesContent":["import { ACTIONS } from \"../App\";\r\n\r\nexport default function DigitButton({ dispatch, digit, className }) {\r\n    return <button className={className || \"\"}\r\n        onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\r\n        >\r\n            {digit}\r\n        </button>\r\n}","import { ACTIONS } from \"../App\";\r\n\r\nexport default function OperatorButton({ dispatch, operator }) {\r\n    return <button className=\"operator-button\"\r\n        onClick={() => dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operator } })}\r\n        >\r\n            { operator }\r\n        </button>\r\n}","import { useReducer } from 'react';\nimport DigitButton from './components/digit-button';\nimport OperatorButton from './components/operator-button';\nimport './App.css';\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  PERCENTAGE: 'percentage',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer(state, { type, payload }){\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite){\n        return {\n          ...state,\n          currentNumber: payload.digit,\n          overwrite: false\n        }\n      }\n\n      if (payload.digit === 0 && state.currentNumber === 0) {\n        return state\n      }\n      if (payload.digit === \".\" && state.currentNumber.include(\".\")) {\n        return state\n      }\n\n      return {\n        ...state, \n        currentNumber: `${state.currentNumber || ''}${payload.digit}`\n      };\n\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentNumber == null && state.previousNumber == null){\n        return state\n      }\n      \n      if (state.currentNumber == null){\n        return {\n          ...state,\n          operator: payload.operator\n        }\n      }\n\n      if (state.previousNumber == null){\n        return {\n          ...state,\n          operator: payload.operator, \n          previousNumber: state.currentNumber,\n          currentNumber: null\n        }\n      }\n      \n      return {\n        ...state,\n        operator: payload.operator, \n        previousNumber: evaluate(state),\n        currentNumber: null\n      }\n  \n    case ACTIONS.CLEAR:\n      return {};\n    \n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite){\n        return {\n          ...state,\n          currentNumber: null,\n          overwrite: false\n        }\n      }\n\n      if (state.currentNumber == null) {\n        return state\n      }\n\n      if (state.currentNumber.length === 1){\n        return{\n          ...state,\n          currentNumber: null\n        }\n      }\n\n      return {\n        ...state, \n        currentNumber: state.currentNumber.slice(0, -1)\n      }\n\n    case ACTIONS.EVALUATE:\n      if (state.currentNumber == null || state.previousNumber == null || state.operator == null){\n        return state;\n      }\n\n      return {\n        ...state,\n        operator: null,\n        previousNumber: null,\n        overwrite: true,\n        currentNumber: evaluate(state)\n      }\n    \n    case ACTIONS.PERCENTAGE:\n      if (state.currentNumber == null){\n        return state\n      }\n\n      return {\n        ...state,\n        overwrite: true,\n        currentNumber: (parseFloat(state.currentNumber) / 100).toString()\n      }\n    \n    default:\n      return state;\n  }\n}\n\nfunction evaluate({ currentNumber, previousNumber, operator }){\n  const prev = parseFloat(previousNumber)\n  const curr = parseFloat(currentNumber)\n  if (isNaN(prev) || isNaN(curr)) {\n    return \"\"\n  }\n  \n  let resulte = \"\"\n  switch (operator){\n    case \"+\":\n      resulte = prev + curr\n      break\n    case \"-\":\n      resulte = prev - curr\n      break\n    case \"x\":\n      resulte = prev * curr\n      break\n    case \"/\":\n      resulte = curr !== 0 ? prev / curr : \"Error\"\n      break\n    default:\n      break\n  }\n  return resulte.toString()\n}\n\nfunction App() {\n  const [{ currentNumber }, dispatch] = useReducer(reducer, {});\n\n  return (\n    <div className=\"calculator\">\n     <div className=\"screen\">\n       <div className=\"current-number\">{currentNumber}</div>\n     </div>\n     <button \n      className=\"up-button\" \n      onClick={() => {dispatch({ type: ACTIONS.CLEAR })}}\n      >AC</button>\n     <button \n      className=\"up-button\"\n      onClick={() => {dispatch({ type: ACTIONS.DELETE_DIGIT })}}\n      >Del</button>\n     <button \n      className=\"up-button\"\n      onClick={ () => {dispatch({ type: ACTIONS.PERCENTAGE })}}\n      >%</button> \n     <OperatorButton dispatch={dispatch} operator=\"/\" />\n     <DigitButton dispatch={dispatch} digit=\"7\" />\n     <DigitButton dispatch={dispatch} digit=\"8\" />\n     <DigitButton dispatch={dispatch} digit=\"9\" />\n     <OperatorButton dispatch={dispatch} operator=\"x\" />\n     <DigitButton dispatch={dispatch} digit=\"4\" />\n     <DigitButton dispatch={dispatch} digit=\"5\" />\n     <DigitButton dispatch={dispatch} digit=\"6\" />\n     <OperatorButton dispatch={dispatch} operator=\"-\" />\n     <DigitButton dispatch={dispatch} digit=\"1\" />\n     <DigitButton dispatch={dispatch} digit=\"2\" />\n     <DigitButton dispatch={dispatch} digit=\"3\" />\n     <OperatorButton dispatch={dispatch} operator=\"+\" />\n     <DigitButton dispatch={dispatch} digit=\"0\" className=\"span-two\"/>\n     <DigitButton dispatch={dispatch} digit=\".\" />\n     <button \n      className=\"operator-button\" \n      onClick={() => {dispatch({ type: ACTIONS.EVALUATE })}}\n      >=</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}